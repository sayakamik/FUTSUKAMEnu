<div class="container">
  <div class="row">
    <div class="col-md-11">
      <% if @recipe.errors.any? %>
        <%= @recipe.errors.count %>件のエラーが発生しました
        <ul>
          <% @recipe.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
        </ul>
      <% end %>
      <div class="row">
        <h3><strong>レシピ編集</strong></h3>
      </div>

      <%= form_with model: @recipe, local:true do |f| %>
        <div class="form-group row">
          <div class="col-md-3">
           　<%= image_tag @recipe.get_menu_image(600, 400), class: "img-fluid" %>
         　　 <%= f.file_field :menu_image, accept: 'image/*', size: 30 %>
          </div>
          <div class="col-md-9 col-sm-12">

            <!--レシピ名、説明文-->
            <div class="cooking-title">レシピについて</div>
              <%= f.text_field :name, autofocus: true, placeholder: "メニュー名(50文字以内)" , class: "form-control" %>
              <%= f.text_area :description, placeholder: "サブタイトル(100字以内)", class: "form-control" %>

            <!--1日目レシピ入力、投稿（Javascript、一部modelに記載)-->
            <div class="cooking-title">アレンジ前1日目レシピ</div>
              <%= f.text_field :original_menu_name, autofocus: true, placeholder: "1日目メニュー(15文字以内)",
                  id: "originalMenuField",
                  class: "form-control",
                  value: OriginalMenu.find(@recipe.original_menu_id).name,
                  data: {
                    json: @original_menus_json
                  } %>
            <div id="originalMenuList"></div>
            <%= f.hidden_field :original_menu_id, id: "originalMenuId", value: @recipe.original_menu_id %>

            <!--タグ-->
            <div class="form-group">
              <div class="cooking-title">関連タグ</div>
                <section class="tag">
                    <%= f.text_field :tag_name, value: @tag_list, placeholder: "タグ(カンマ『,』で複数個登録できます)", class: 'form-control book_tag_name' %>
                </section>
            </div>
          </div>
        </div>

        <!--材料フォーム（Javascript)-->
        <div class="cooking-title">材料</div>
          <section class="ingredient">
            <!-- 材料、分量フォームの隠し要素テンプレート、display: noneを指定しているため表示はされない -->
            <div id="ingredient-fields-template" style="display: none;">
              <!-- 新しいIngredientオブジェクトを作成, 新たに追加されるフォームに一意なインデックスを付与 -->
              <%= f.fields_for :ingredients, Ingredient.new, child_index: "new_ingredient" do |ingredient_field| %>
                <%= render 'ingredient_field', f: ingredient_field %>
              <% end %>
            </div>
            <!--隠し要素テンプレート終わり-->
            <!--すでにデータベースに保存されているか、または新しくユーザーが追加した「材料」に関する情報を表示するためのフォーム-->
            <%= f.fields_for :ingredients do |ingredient_field| %>
              <%= render 'ingredient_field', f: ingredient_field %>
            <% end %>
            <div id="ingredients"></div>
        　　<div>
              <button type="button" id="add-ingredient" class="btn mb-4"  style="background-color: #ffe4e1;">材料を追加</button>
            </div>
      　　  </section>

        <!--手順フォーム（Javascript)-->
        <div class="cooking-title">作り方（必須）</div>
          <section class="procedure">
            　<!--作り方フォームの隠し要素テンプレート-->
              <div id="procedure-fields-template" style="display: none;">
                <!--新しいRecipeStepオブジェクトを作成-->
                <%= f.fields_for :procedures, Procedure.new, child_index: "new_procedure" do |procedure_field| %>
                  <%= render 'procedure_field', f: procedure_field %>
                <% end %>
              </div>
              <!--隠し要素テンプレート終わり-->
              <!--すでにデータベースに存在するか、または新しく追加された「作り方」ステップを表示するフォーム-->
              <%= f.fields_for :procedures do |procedure_field| %>
                <%= render 'procedure_field', f: procedure_field %>
              <% end %>
              <div id="procedures"></div>
              <div>
                 <button type="button" id="add-procedure" class="btn"  style="background-color: #ffe4e1;">作り方を追加</button>
              </div>
          </section>

        <!--材料、手順のJavascript-->
        <script>
             // DOMContentLoaded文書のロード、DOMが完全に読み込まれた後に以下のコードが実行される
            document.addEventListener('turbolinks:load', function() {
              // "add-ingredient" IDを持つHTML要素（ボタン）を取得、「材料を追加」ボタンにクリックイベントを追加
              document.getElementById("add-ingredient").addEventListener("click", function() {
                // "ingredient-fields-template"というIDを持つdiv要素の内部HTML（隠しテンプレート）を取得
                var content = document.getElementById("ingredient-fields-template").innerHTML;
                var uniqueId = new Date().getTime();
                // replace: テンプレート内のプレースホルダーを一意なIDで置き換え
                content = content.replace(/new_ingredient/g, uniqueId);
                // 新しい材料フォームをDOMに追加
                document.getElementById("ingredients").insertAdjacentHTML('beforeend', content);
              });
            });
              // 作り方フォーム追加
              document.addEventListener('turbolinks:load', () => {
                document.querySelector('#add-procedure').addEventListener('click', () => {
                  let content = document.getElementById('procedure-fields-template').innerHTML;
                  let uniqueId = new Date().getTime();
                  content = content.replace(/new_procedure/g, uniqueId);
                  document.getElementById('procedures').insertAdjacentHTML('beforeend', content);
                });
              });
        </script>

      <div class="row mt-4 pb-5">
        <div class="form-inline mx-auto">
          <% if @recipe.is_draft == true %>
            <%= f.submit 'レシピを公開', :name => 'publicize_draft', class: 'mr-5 btn btn-sm btn-warning text-white' %>
            <%= f.submit '下書きに保存', :name => 'update_draft', class: 'mr-5 btn btn-sm btn-outline-secondary' %>
          <% else %>
            <%= f.submit "レシピを更新", :name => 'update_post', class:'btn btn-sm btn-warning text-light' %>
          <% end %>
        </div>
      </div>
      <div class="mt-4 pb-3 text-center">
        <u><%= link_to "レシピを削除", recipe_path(@recipe.id), method: :delete, data: {confirm: "このレシピを削除しますか？"}, class:'text-danger' %></u>
      </div>
      <% end %>
    </div>
  </div>
</div>

<!--1日目レシピ本当はJS本体に記載して、編集画面とかに効かせたほうが良い。-->
<script>
  document.addEventListener('turbolinks:load', function() {
    $("#originalMenuField").on("keyup", (e) => {
      const data = JSON.parse(e.target.dataset.json)
      const target = e.target.value
      const result = data.filter((o) =>
        o.name.includes(target) && target.length > 0
      )
      const originalMenuList = $("#originalMenuList")
      originalMenuList.empty()
      result.forEach((o) => {
        const appendData = originalMenuList.append(`
         <div class="badge badge-secondary" data-id=${o.id}>${o.name}</div>
        `)
        appendData.off();
        appendData.on("click", (e) => {
          const name = e.target.innerHTML
          const id = e.target.dataset.id
          $("#originalMenuField").val(name)
          $("#originalMenuId").val(id)
          originalMenuList.empty()
        })
      })
    })
  });
</script>